The function timesCross checks if staff members may have been in contact with the person. All scenar-ios in timesCross checks for any form of interaction with the person who lost the notebook is displayed returning true if the times match or false if it doesn’t. This does this by comparing the starting and end-ing times from two staff members and their overlapping time space using chaining if statements. This was chosen as it is the most simplicist method to visualise. I could have used switch cases but found it more difficult for unexperienced programmers unable to understand what the code does without ex-tensive comments.
The function timesCrossLate is an extended version of timesCross where inputs for after midnight work for the program. This is done by adding 24 (resembling another day) for after midnight times variables and calling the function timesCross. This works because starting times can be as early as 5 am with lat-est being 4pm making the code to always preform correctly. However, if the times change with over-lapping opening and closing then may not work. Calling the function timesCross was performed as it requires fewer lines and both codes are extremely similar. Upon this if dates change back to normal staff hours any developer can adjust easily by just calling the timesCross function.
The function ReadingFileAndManipulation is used to check if staff members may have come across the notebook, automatically through checking dates within a file. Outputting staff who may have note-book and number of staff who may have it. The code does this by counting the number of lines within the file storing each line within an array using the scanner and file imports. Then splitting each element in this array to gather the name, start and ending times. Using the function timesCrossLate it checks if the staff member may have been in contact, incrementing the variable numberOP if so, outputting the name + “might have the notebook.” Then checking if any other access log files are present if so then using recursion to redo program else ending with the numberOP variable. I chose to use scanner to save the .txt file into an array through scanner as scanner takes each element as a line which can be easily modified to separate important information. With other methods doing this character by charac-ter or requiring additional imports.
The purpose of getCrossingStaff is a manual method of ReadingFileAndManipulation requesting the user to input all staff member times. First the program checks if there is a log file if so it runs the Read-ingFileAndManipulation function else the user manually has to type all the times, names and number of staff. Using scanner, the program stores the inputs as integers and strings. This was chosen to use scanner as is both jointly used to store file lines and is an effective way to store user inputs.
The main function starts the program and asks the user their starting and ending times and runs the getCrossingStaff.
